import {Component, ElementRef, ViewChild, OnInit} from '@angular/core';import {DataSource} from '@angular/cdk';import {BehaviorSubject} from 'rxjs/BehaviorSubject';import {Observable} from 'rxjs/Observable';import 'rxjs/add/operator/startWith';import 'rxjs/add/observable/merge';import 'rxjs/add/operator/map';import 'rxjs/add/operator/debounceTime';import 'rxjs/add/operator/distinctUntilChanged';import 'rxjs/add/observable/fromEvent';import 'rxjs/add/observable/of';import { Wakanda } from '../wakanda.service';@Component({  selector: 'contacts-table',  styleUrls: ['ContactsTable.css'],  templateUrl: 'ContactsTable.html',})export class contactsTable {	displayedColumns = ['fullName', 'relationship', 'phoneMobile', 'phoneHome', 'emailaddress'];	datasource = new ContactsDS();	}export interface Element{	fullName: string;	relationship: string;	phoneMobile: string;	phoneHome: string;	emailaddress: string;}export class tableData implements OnInit{	contacts = [];		constructor(public wakanda: Wakanda){}	ngOnInit(){}		getContacts()	{		this.wakanda.getCatalog().then(ds =>		{			ds['Contacts'].query({pageSize: 10}).then(collection =>			{				collection.more().then(collection =>				{					this.contacts = collection.entities;				})			});		});	}}const data: Element[] = [this.tableData.getContacts()];export class ContactsDS extends DataSource<any>{	connect(): Observable<Element[]>	{		return Observable.of(data);	}	disconnect(){}}